/*=============================================================================
This file was generated by the VimbaClassGenerator
=============================================================================*/

#include "MakoCameraTest.h"

MakoCameraTest::MakoCameraTest (
    const char         *pCameraID,
    const char         *pCameraName,
    const char         *pCameraModel,
    const char         *pCameraSerialNumber,
    const char         *pInterfaceID,
    VmbInterfaceType    interfaceType,
    const char         *pInterfaceName,
    const char         *pInterfaceSerialNumber,
    VmbAccessModeType   interfacePermittedAccess 
    )
    : Camera (
        pCameraID, 
        pCameraName, 
        pCameraModel, 
        pCameraSerialNumber, 
        pInterfaceID, 
        interfaceType)
{
}


// Category /Acquisition
VmbErrorType MakoCameraTest::AcquisitionAbort ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionAbortFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType MakoCameraTest::GetAcquisitionAbortFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionAbortFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionAbort", m_AcquisitionAbortFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionAbortFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionAbortFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetAcquisitionFrameCount (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionFrameCountFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetAcquisitionFrameCount (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionFrameCountFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetAcquisitionFrameCountFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionFrameCountFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionFrameCount", m_AcquisitionFrameCountFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionFrameCountFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionFrameCountFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetAcquisitionFrameRateAbs (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionFrameRateAbsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetAcquisitionFrameRateAbs (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionFrameRateAbsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetAcquisitionFrameRateAbsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionFrameRateAbsFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionFrameRateAbs", m_AcquisitionFrameRateAbsFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionFrameRateAbsFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionFrameRateAbsFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetAcquisitionFrameRateLimit (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionFrameRateLimitFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetAcquisitionFrameRateLimitFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionFrameRateLimitFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionFrameRateLimit", m_AcquisitionFrameRateLimitFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionFrameRateLimitFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionFrameRateLimitFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetAcquisitionMode (AcquisitionModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (AcquisitionModeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetAcquisitionMode (AcquisitionModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetAcquisitionModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionMode", m_AcquisitionModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionModeFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::AcquisitionStart ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionStartFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType MakoCameraTest::GetAcquisitionStartFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionStartFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionStart", m_AcquisitionStartFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionStartFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionStartFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::AcquisitionStop ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionStopFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType MakoCameraTest::GetAcquisitionStopFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionStopFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionStop", m_AcquisitionStopFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionStopFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionStopFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetRecorderPreEventCount (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetRecorderPreEventCountFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetRecorderPreEventCount (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetRecorderPreEventCountFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetRecorderPreEventCountFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_RecorderPreEventCountFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("RecorderPreEventCount", m_RecorderPreEventCountFeature);
        if (result != VmbErrorSuccess)
        {
            m_RecorderPreEventCountFeature.reset();
            return result;
        }
    }
    feature = m_RecorderPreEventCountFeature;
    return VmbErrorSuccess;
}


// Category /Acquisition/Trigger
VmbErrorType MakoCameraTest::GetTriggerActivation (TriggerActivationEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerActivationFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (TriggerActivationEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetTriggerActivation (TriggerActivationEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerActivationFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetTriggerActivationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerActivationFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerActivation", m_TriggerActivationFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerActivationFeature.reset();
            return result;
        }
    }
    feature = m_TriggerActivationFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetTriggerDelayAbs (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerDelayAbsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetTriggerDelayAbs (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerDelayAbsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetTriggerDelayAbsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerDelayAbsFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerDelayAbs", m_TriggerDelayAbsFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerDelayAbsFeature.reset();
            return result;
        }
    }
    feature = m_TriggerDelayAbsFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetTriggerMode (TriggerModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (TriggerModeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetTriggerMode (TriggerModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetTriggerModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerMode", m_TriggerModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerModeFeature.reset();
            return result;
        }
    }
    feature = m_TriggerModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetTriggerOverlap (TriggerOverlapEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerOverlapFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (TriggerOverlapEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetTriggerOverlap (TriggerOverlapEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerOverlapFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetTriggerOverlapFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerOverlapFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerOverlap", m_TriggerOverlapFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerOverlapFeature.reset();
            return result;
        }
    }
    feature = m_TriggerOverlapFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetTriggerSelector (TriggerSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (TriggerSelectorEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetTriggerSelector (TriggerSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetTriggerSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerSelector", m_TriggerSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerSelectorFeature.reset();
            return result;
        }
    }
    feature = m_TriggerSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::TriggerSoftware ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerSoftwareFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType MakoCameraTest::GetTriggerSoftwareFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerSoftwareFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerSoftware", m_TriggerSoftwareFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerSoftwareFeature.reset();
            return result;
        }
    }
    feature = m_TriggerSoftwareFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetTriggerSource (TriggerSourceEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerSourceFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (TriggerSourceEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetTriggerSource (TriggerSourceEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerSourceFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetTriggerSourceFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerSourceFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerSource", m_TriggerSourceFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerSourceFeature.reset();
            return result;
        }
    }
    feature = m_TriggerSourceFeature;
    return VmbErrorSuccess;
}


// Category /ActionControl
VmbErrorType MakoCameraTest::GetActionDeviceKey (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetActionDeviceKeyFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetActionDeviceKey (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetActionDeviceKeyFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetActionDeviceKeyFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ActionDeviceKeyFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ActionDeviceKey", m_ActionDeviceKeyFeature);
        if (result != VmbErrorSuccess)
        {
            m_ActionDeviceKeyFeature.reset();
            return result;
        }
    }
    feature = m_ActionDeviceKeyFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetActionGroupKey (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetActionGroupKeyFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetActionGroupKey (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetActionGroupKeyFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetActionGroupKeyFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ActionGroupKeyFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ActionGroupKey", m_ActionGroupKeyFeature);
        if (result != VmbErrorSuccess)
        {
            m_ActionGroupKeyFeature.reset();
            return result;
        }
    }
    feature = m_ActionGroupKeyFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetActionGroupMask (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetActionGroupMaskFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetActionGroupMask (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetActionGroupMaskFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetActionGroupMaskFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ActionGroupMaskFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ActionGroupMask", m_ActionGroupMaskFeature);
        if (result != VmbErrorSuccess)
        {
            m_ActionGroupMaskFeature.reset();
            return result;
        }
    }
    feature = m_ActionGroupMaskFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetActionSelector (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetActionSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetActionSelector (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetActionSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetActionSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ActionSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ActionSelector", m_ActionSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_ActionSelectorFeature.reset();
            return result;
        }
    }
    feature = m_ActionSelectorFeature;
    return VmbErrorSuccess;
}


// Category /BufferHandlingControl
VmbErrorType MakoCameraTest::GetStreamAnnounceBufferMinimum (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamAnnounceBufferMinimumFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStreamAnnounceBufferMinimumFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamAnnounceBufferMinimumFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamAnnounceBufferMinimum", m_StreamAnnounceBufferMinimumFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamAnnounceBufferMinimumFeature.reset();
            return result;
        }
    }
    feature = m_StreamAnnounceBufferMinimumFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStreamAnnouncedBufferCount (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamAnnouncedBufferCountFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStreamAnnouncedBufferCountFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamAnnouncedBufferCountFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamAnnouncedBufferCount", m_StreamAnnouncedBufferCountFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamAnnouncedBufferCountFeature.reset();
            return result;
        }
    }
    feature = m_StreamAnnouncedBufferCountFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStreamBufferHandlingMode (StreamBufferHandlingModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamBufferHandlingModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (StreamBufferHandlingModeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetStreamBufferHandlingMode (StreamBufferHandlingModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamBufferHandlingModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStreamBufferHandlingModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamBufferHandlingModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamBufferHandlingMode", m_StreamBufferHandlingModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamBufferHandlingModeFeature.reset();
            return result;
        }
    }
    feature = m_StreamBufferHandlingModeFeature;
    return VmbErrorSuccess;
}


// Category /Controls
VmbErrorType MakoCameraTest::GetGamma (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGammaFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGamma (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGammaFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGammaFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GammaFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("Gamma", m_GammaFeature);
        if (result != VmbErrorSuccess)
        {
            m_GammaFeature.reset();
            return result;
        }
    }
    feature = m_GammaFeature;
    return VmbErrorSuccess;
}


// Category /Controls/BlackLevelControl
VmbErrorType MakoCameraTest::GetBlackLevel (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBlackLevelFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetBlackLevel (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBlackLevelFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetBlackLevelFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_BlackLevelFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("BlackLevel", m_BlackLevelFeature);
        if (result != VmbErrorSuccess)
        {
            m_BlackLevelFeature.reset();
            return result;
        }
    }
    feature = m_BlackLevelFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetBlackLevelSelector (BlackLevelSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBlackLevelSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (BlackLevelSelectorEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetBlackLevelSelector (BlackLevelSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBlackLevelSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetBlackLevelSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_BlackLevelSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("BlackLevelSelector", m_BlackLevelSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_BlackLevelSelectorFeature.reset();
            return result;
        }
    }
    feature = m_BlackLevelSelectorFeature;
    return VmbErrorSuccess;
}


// Category /Controls/DSPSubregion
VmbErrorType MakoCameraTest::GetDSPSubregionBottom (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDSPSubregionBottomFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetDSPSubregionBottom (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDSPSubregionBottomFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDSPSubregionBottomFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DSPSubregionBottomFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DSPSubregionBottom", m_DSPSubregionBottomFeature);
        if (result != VmbErrorSuccess)
        {
            m_DSPSubregionBottomFeature.reset();
            return result;
        }
    }
    feature = m_DSPSubregionBottomFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDSPSubregionLeft (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDSPSubregionLeftFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetDSPSubregionLeft (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDSPSubregionLeftFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDSPSubregionLeftFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DSPSubregionLeftFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DSPSubregionLeft", m_DSPSubregionLeftFeature);
        if (result != VmbErrorSuccess)
        {
            m_DSPSubregionLeftFeature.reset();
            return result;
        }
    }
    feature = m_DSPSubregionLeftFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDSPSubregionRight (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDSPSubregionRightFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetDSPSubregionRight (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDSPSubregionRightFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDSPSubregionRightFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DSPSubregionRightFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DSPSubregionRight", m_DSPSubregionRightFeature);
        if (result != VmbErrorSuccess)
        {
            m_DSPSubregionRightFeature.reset();
            return result;
        }
    }
    feature = m_DSPSubregionRightFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDSPSubregionTop (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDSPSubregionTopFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetDSPSubregionTop (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDSPSubregionTopFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDSPSubregionTopFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DSPSubregionTopFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DSPSubregionTop", m_DSPSubregionTopFeature);
        if (result != VmbErrorSuccess)
        {
            m_DSPSubregionTopFeature.reset();
            return result;
        }
    }
    feature = m_DSPSubregionTopFeature;
    return VmbErrorSuccess;
}


// Category /Controls/Exposure
VmbErrorType MakoCameraTest::GetExposureAuto (ExposureAutoEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (ExposureAutoEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetExposureAuto (ExposureAutoEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetExposureAutoFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureAutoFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureAuto", m_ExposureAutoFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureAutoFeature.reset();
            return result;
        }
    }
    feature = m_ExposureAutoFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetExposureMode (ExposureModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (ExposureModeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetExposureMode (ExposureModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetExposureModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureMode", m_ExposureModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureModeFeature.reset();
            return result;
        }
    }
    feature = m_ExposureModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetExposureTimeAbs (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureTimeAbsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetExposureTimeAbs (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureTimeAbsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetExposureTimeAbsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureTimeAbsFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureTimeAbs", m_ExposureTimeAbsFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureTimeAbsFeature.reset();
            return result;
        }
    }
    feature = m_ExposureTimeAbsFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetExposureTimeIncrement (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureTimeIncrementFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetExposureTimeIncrementFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureTimeIncrementFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureTimeIncrement", m_ExposureTimeIncrementFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureTimeIncrementFeature.reset();
            return result;
        }
    }
    feature = m_ExposureTimeIncrementFeature;
    return VmbErrorSuccess;
}


// Category /Controls/Exposure/ExposureAutoControl
VmbErrorType MakoCameraTest::GetExposureAutoAdjustTol (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoAdjustTolFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetExposureAutoAdjustTol (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoAdjustTolFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetExposureAutoAdjustTolFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureAutoAdjustTolFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureAutoAdjustTol", m_ExposureAutoAdjustTolFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureAutoAdjustTolFeature.reset();
            return result;
        }
    }
    feature = m_ExposureAutoAdjustTolFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetExposureAutoAlg (ExposureAutoAlgEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoAlgFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (ExposureAutoAlgEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetExposureAutoAlg (ExposureAutoAlgEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoAlgFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetExposureAutoAlgFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureAutoAlgFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureAutoAlg", m_ExposureAutoAlgFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureAutoAlgFeature.reset();
            return result;
        }
    }
    feature = m_ExposureAutoAlgFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetExposureAutoMax (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoMaxFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetExposureAutoMax (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoMaxFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetExposureAutoMaxFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureAutoMaxFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureAutoMax", m_ExposureAutoMaxFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureAutoMaxFeature.reset();
            return result;
        }
    }
    feature = m_ExposureAutoMaxFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetExposureAutoMin (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoMinFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetExposureAutoMin (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoMinFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetExposureAutoMinFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureAutoMinFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureAutoMin", m_ExposureAutoMinFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureAutoMinFeature.reset();
            return result;
        }
    }
    feature = m_ExposureAutoMinFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetExposureAutoOutliers (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoOutliersFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetExposureAutoOutliers (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoOutliersFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetExposureAutoOutliersFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureAutoOutliersFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureAutoOutliers", m_ExposureAutoOutliersFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureAutoOutliersFeature.reset();
            return result;
        }
    }
    feature = m_ExposureAutoOutliersFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetExposureAutoRate (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoRateFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetExposureAutoRate (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoRateFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetExposureAutoRateFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureAutoRateFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureAutoRate", m_ExposureAutoRateFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureAutoRateFeature.reset();
            return result;
        }
    }
    feature = m_ExposureAutoRateFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetExposureAutoTarget (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoTargetFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetExposureAutoTarget (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureAutoTargetFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetExposureAutoTargetFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureAutoTargetFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureAutoTarget", m_ExposureAutoTargetFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureAutoTargetFeature.reset();
            return result;
        }
    }
    feature = m_ExposureAutoTargetFeature;
    return VmbErrorSuccess;
}


// Category /Controls/GainControl
VmbErrorType MakoCameraTest::GetGain (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGain (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGainFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GainFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("Gain", m_GainFeature);
        if (result != VmbErrorSuccess)
        {
            m_GainFeature.reset();
            return result;
        }
    }
    feature = m_GainFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGainAuto (GainAutoEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (GainAutoEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetGainAuto (GainAutoEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGainAutoFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GainAutoFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GainAuto", m_GainAutoFeature);
        if (result != VmbErrorSuccess)
        {
            m_GainAutoFeature.reset();
            return result;
        }
    }
    feature = m_GainAutoFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGainSelector (GainSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (GainSelectorEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetGainSelector (GainSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGainSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GainSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GainSelector", m_GainSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_GainSelectorFeature.reset();
            return result;
        }
    }
    feature = m_GainSelectorFeature;
    return VmbErrorSuccess;
}


// Category /Controls/GainControl/GainAutoControl
VmbErrorType MakoCameraTest::GetGainAutoAdjustTol (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoAdjustTolFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGainAutoAdjustTol (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoAdjustTolFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGainAutoAdjustTolFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GainAutoAdjustTolFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GainAutoAdjustTol", m_GainAutoAdjustTolFeature);
        if (result != VmbErrorSuccess)
        {
            m_GainAutoAdjustTolFeature.reset();
            return result;
        }
    }
    feature = m_GainAutoAdjustTolFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGainAutoMax (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoMaxFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGainAutoMax (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoMaxFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGainAutoMaxFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GainAutoMaxFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GainAutoMax", m_GainAutoMaxFeature);
        if (result != VmbErrorSuccess)
        {
            m_GainAutoMaxFeature.reset();
            return result;
        }
    }
    feature = m_GainAutoMaxFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGainAutoMin (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoMinFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGainAutoMin (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoMinFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGainAutoMinFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GainAutoMinFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GainAutoMin", m_GainAutoMinFeature);
        if (result != VmbErrorSuccess)
        {
            m_GainAutoMinFeature.reset();
            return result;
        }
    }
    feature = m_GainAutoMinFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGainAutoOutliers (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoOutliersFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGainAutoOutliers (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoOutliersFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGainAutoOutliersFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GainAutoOutliersFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GainAutoOutliers", m_GainAutoOutliersFeature);
        if (result != VmbErrorSuccess)
        {
            m_GainAutoOutliersFeature.reset();
            return result;
        }
    }
    feature = m_GainAutoOutliersFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGainAutoRate (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoRateFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGainAutoRate (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoRateFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGainAutoRateFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GainAutoRateFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GainAutoRate", m_GainAutoRateFeature);
        if (result != VmbErrorSuccess)
        {
            m_GainAutoRateFeature.reset();
            return result;
        }
    }
    feature = m_GainAutoRateFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGainAutoTarget (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoTargetFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGainAutoTarget (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainAutoTargetFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGainAutoTargetFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GainAutoTargetFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GainAutoTarget", m_GainAutoTargetFeature);
        if (result != VmbErrorSuccess)
        {
            m_GainAutoTargetFeature.reset();
            return result;
        }
    }
    feature = m_GainAutoTargetFeature;
    return VmbErrorSuccess;
}


// Category /Controls/LUTControl
VmbErrorType MakoCameraTest::GetLUTEnable (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTEnableFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetLUTEnable (bool value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTEnableFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetLUTEnableFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LUTEnableFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LUTEnable", m_LUTEnableFeature);
        if (result != VmbErrorSuccess)
        {
            m_LUTEnableFeature.reset();
            return result;
        }
    }
    feature = m_LUTEnableFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetLUTIndex (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTIndexFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetLUTIndex (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTIndexFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetLUTIndexFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LUTIndexFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LUTIndex", m_LUTIndexFeature);
        if (result != VmbErrorSuccess)
        {
            m_LUTIndexFeature.reset();
            return result;
        }
    }
    feature = m_LUTIndexFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::LUTLoadAll ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTLoadAllFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType MakoCameraTest::GetLUTLoadAllFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LUTLoadAllFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LUTLoadAll", m_LUTLoadAllFeature);
        if (result != VmbErrorSuccess)
        {
            m_LUTLoadAllFeature.reset();
            return result;
        }
    }
    feature = m_LUTLoadAllFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetLUTMode (LUTModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (LUTModeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetLUTMode (LUTModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetLUTModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LUTModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LUTMode", m_LUTModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_LUTModeFeature.reset();
            return result;
        }
    }
    feature = m_LUTModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::LUTSaveAll ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTSaveAllFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType MakoCameraTest::GetLUTSaveAllFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LUTSaveAllFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LUTSaveAll", m_LUTSaveAllFeature);
        if (result != VmbErrorSuccess)
        {
            m_LUTSaveAllFeature.reset();
            return result;
        }
    }
    feature = m_LUTSaveAllFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetLUTSelector (LUTSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (LUTSelectorEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetLUTSelector (LUTSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetLUTSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LUTSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LUTSelector", m_LUTSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_LUTSelectorFeature.reset();
            return result;
        }
    }
    feature = m_LUTSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetLUTValue (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTValueFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetLUTValue (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTValueFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetLUTValueFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LUTValueFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LUTValue", m_LUTValueFeature);
        if (result != VmbErrorSuccess)
        {
            m_LUTValueFeature.reset();
            return result;
        }
    }
    feature = m_LUTValueFeature;
    return VmbErrorSuccess;
}


// Category /Controls/LUTControl/LUTInfo
VmbErrorType MakoCameraTest::GetLUTAddress (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTAddressFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetLUTAddressFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LUTAddressFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LUTAddress", m_LUTAddressFeature);
        if (result != VmbErrorSuccess)
        {
            m_LUTAddressFeature.reset();
            return result;
        }
    }
    feature = m_LUTAddressFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetLUTBitDepthIn (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTBitDepthInFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetLUTBitDepthInFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LUTBitDepthInFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LUTBitDepthIn", m_LUTBitDepthInFeature);
        if (result != VmbErrorSuccess)
        {
            m_LUTBitDepthInFeature.reset();
            return result;
        }
    }
    feature = m_LUTBitDepthInFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetLUTBitDepthOut (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTBitDepthOutFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetLUTBitDepthOutFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LUTBitDepthOutFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LUTBitDepthOut", m_LUTBitDepthOutFeature);
        if (result != VmbErrorSuccess)
        {
            m_LUTBitDepthOutFeature.reset();
            return result;
        }
    }
    feature = m_LUTBitDepthOutFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetLUTSizeBytes (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLUTSizeBytesFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetLUTSizeBytesFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LUTSizeBytesFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LUTSizeBytes", m_LUTSizeBytesFeature);
        if (result != VmbErrorSuccess)
        {
            m_LUTSizeBytesFeature.reset();
            return result;
        }
    }
    feature = m_LUTSizeBytesFeature;
    return VmbErrorSuccess;
}


// Category /DeviceStatus
VmbErrorType MakoCameraTest::GetDeviceTemperature (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceTemperatureFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDeviceTemperatureFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceTemperatureFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceTemperature", m_DeviceTemperatureFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceTemperatureFeature.reset();
            return result;
        }
    }
    feature = m_DeviceTemperatureFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDeviceTemperatureSelector (DeviceTemperatureSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceTemperatureSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (DeviceTemperatureSelectorEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetDeviceTemperatureSelector (DeviceTemperatureSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceTemperatureSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDeviceTemperatureSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceTemperatureSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceTemperatureSelector", m_DeviceTemperatureSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceTemperatureSelectorFeature.reset();
            return result;
        }
    }
    feature = m_DeviceTemperatureSelectorFeature;
    return VmbErrorSuccess;
}


// Category /EventControl
VmbErrorType MakoCameraTest::GetEventNotification (EventNotificationEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventNotificationFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (EventNotificationEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetEventNotification (EventNotificationEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventNotificationFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventNotificationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventNotificationFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventNotification", m_EventNotificationFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventNotificationFeature.reset();
            return result;
        }
    }
    feature = m_EventNotificationFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventSelector (EventSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (EventSelectorEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetEventSelector (EventSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventSelector", m_EventSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventSelectorFeature.reset();
            return result;
        }
    }
    feature = m_EventSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventsEnable1 (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventsEnable1Feature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetEventsEnable1 (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventsEnable1Feature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventsEnable1Feature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventsEnable1Feature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventsEnable1", m_EventsEnable1Feature);
        if (result != VmbErrorSuccess)
        {
            m_EventsEnable1Feature.reset();
            return result;
        }
    }
    feature = m_EventsEnable1Feature;
    return VmbErrorSuccess;
}


// Category /EventControl/EventData
VmbErrorType MakoCameraTest::GetEventAcquisitionEndFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAcquisitionEndFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAcquisitionEndFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAcquisitionEndFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAcquisitionEndFrameID", m_EventAcquisitionEndFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAcquisitionEndFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventAcquisitionEndFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAcquisitionEndTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAcquisitionEndTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAcquisitionEndTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAcquisitionEndTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAcquisitionEndTimestamp", m_EventAcquisitionEndTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAcquisitionEndTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventAcquisitionEndTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAcquisitionRecordTriggerFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAcquisitionRecordTriggerFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAcquisitionRecordTriggerFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAcquisitionRecordTriggerFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAcquisitionRecordTriggerFrameID", m_EventAcquisitionRecordTriggerFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAcquisitionRecordTriggerFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventAcquisitionRecordTriggerFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAcquisitionRecordTriggerTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAcquisitionRecordTriggerTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAcquisitionRecordTriggerTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAcquisitionRecordTriggerTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAcquisitionRecordTriggerTimestamp", m_EventAcquisitionRecordTriggerTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAcquisitionRecordTriggerTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventAcquisitionRecordTriggerTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAcquisitionStartFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAcquisitionStartFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAcquisitionStartFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAcquisitionStartFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAcquisitionStartFrameID", m_EventAcquisitionStartFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAcquisitionStartFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventAcquisitionStartFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAcquisitionStartTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAcquisitionStartTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAcquisitionStartTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAcquisitionStartTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAcquisitionStartTimestamp", m_EventAcquisitionStartTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAcquisitionStartTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventAcquisitionStartTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAction0FrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAction0FrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAction0FrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAction0FrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAction0FrameID", m_EventAction0FrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAction0FrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventAction0FrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAction0Timestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAction0TimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAction0TimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAction0TimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAction0Timestamp", m_EventAction0TimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAction0TimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventAction0TimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAction1FrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAction1FrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAction1FrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAction1FrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAction1FrameID", m_EventAction1FrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAction1FrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventAction1FrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAction1Timestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAction1TimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAction1TimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAction1TimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAction1Timestamp", m_EventAction1TimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAction1TimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventAction1TimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventErrorFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventErrorFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventErrorFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventErrorFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventErrorFrameID", m_EventErrorFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventErrorFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventErrorFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventErrorTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventErrorTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventErrorTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventErrorTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventErrorTimestamp", m_EventErrorTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventErrorTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventErrorTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventExposureEndFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventExposureEndFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventExposureEndFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventExposureEndFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventExposureEndFrameID", m_EventExposureEndFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventExposureEndFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventExposureEndFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventExposureEndTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventExposureEndTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventExposureEndTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventExposureEndTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventExposureEndTimestamp", m_EventExposureEndTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventExposureEndTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventExposureEndTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventExposureStartFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventExposureStartFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventExposureStartFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventExposureStartFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventExposureStartFrameID", m_EventExposureStartFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventExposureStartFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventExposureStartFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventExposureStartTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventExposureStartTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventExposureStartTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventExposureStartTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventExposureStartTimestamp", m_EventExposureStartTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventExposureStartTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventExposureStartTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventFrameTriggerFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventFrameTriggerFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventFrameTriggerFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventFrameTriggerFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventFrameTriggerFrameID", m_EventFrameTriggerFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventFrameTriggerFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventFrameTriggerFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventFrameTriggerReadyFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventFrameTriggerReadyFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventFrameTriggerReadyFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventFrameTriggerReadyFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventFrameTriggerReadyFrameID", m_EventFrameTriggerReadyFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventFrameTriggerReadyFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventFrameTriggerReadyFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventFrameTriggerReadyTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventFrameTriggerReadyTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventFrameTriggerReadyTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventFrameTriggerReadyTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventFrameTriggerReadyTimestamp", m_EventFrameTriggerReadyTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventFrameTriggerReadyTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventFrameTriggerReadyTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventFrameTriggerTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventFrameTriggerTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventFrameTriggerTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventFrameTriggerTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventFrameTriggerTimestamp", m_EventFrameTriggerTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventFrameTriggerTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventFrameTriggerTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventLine1FallingEdgeFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventLine1FallingEdgeFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventLine1FallingEdgeFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventLine1FallingEdgeFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventLine1FallingEdgeFrameID", m_EventLine1FallingEdgeFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventLine1FallingEdgeFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventLine1FallingEdgeFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventLine1FallingEdgeTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventLine1FallingEdgeTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventLine1FallingEdgeTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventLine1FallingEdgeTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventLine1FallingEdgeTimestamp", m_EventLine1FallingEdgeTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventLine1FallingEdgeTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventLine1FallingEdgeTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventLine1RisingEdgeFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventLine1RisingEdgeFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventLine1RisingEdgeFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventLine1RisingEdgeFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventLine1RisingEdgeFrameID", m_EventLine1RisingEdgeFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventLine1RisingEdgeFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventLine1RisingEdgeFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventLine1RisingEdgeTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventLine1RisingEdgeTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventLine1RisingEdgeTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventLine1RisingEdgeTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventLine1RisingEdgeTimestamp", m_EventLine1RisingEdgeTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventLine1RisingEdgeTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventLine1RisingEdgeTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventOverflowFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventOverflowFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventOverflowFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventOverflowFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventOverflowFrameID", m_EventOverflowFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventOverflowFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventOverflowFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventOverflowTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventOverflowTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventOverflowTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventOverflowTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventOverflowTimestamp", m_EventOverflowTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventOverflowTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventOverflowTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventPtpSyncLockedFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventPtpSyncLockedFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventPtpSyncLockedFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventPtpSyncLockedFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventPtpSyncLockedFrameID", m_EventPtpSyncLockedFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventPtpSyncLockedFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventPtpSyncLockedFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventPtpSyncLockedTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventPtpSyncLockedTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventPtpSyncLockedTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventPtpSyncLockedTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventPtpSyncLockedTimestamp", m_EventPtpSyncLockedTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventPtpSyncLockedTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventPtpSyncLockedTimestampFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventPtpSyncLostFrameID (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventPtpSyncLostFrameIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventPtpSyncLostFrameIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventPtpSyncLostFrameIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventPtpSyncLostFrameID", m_EventPtpSyncLostFrameIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventPtpSyncLostFrameIDFeature.reset();
            return result;
        }
    }
    feature = m_EventPtpSyncLostFrameIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventPtpSyncLostTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventPtpSyncLostTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventPtpSyncLostTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventPtpSyncLostTimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventPtpSyncLostTimestamp", m_EventPtpSyncLostTimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventPtpSyncLostTimestampFeature.reset();
            return result;
        }
    }
    feature = m_EventPtpSyncLostTimestampFeature;
    return VmbErrorSuccess;
}


// Category /EventControl/EventID
VmbErrorType MakoCameraTest::GetEventAcquisitionEnd (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAcquisitionEndFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAcquisitionEndFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAcquisitionEndFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAcquisitionEnd", m_EventAcquisitionEndFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAcquisitionEndFeature.reset();
            return result;
        }
    }
    feature = m_EventAcquisitionEndFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAcquisitionRecordTrigger (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAcquisitionRecordTriggerFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAcquisitionRecordTriggerFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAcquisitionRecordTriggerFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAcquisitionRecordTrigger", m_EventAcquisitionRecordTriggerFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAcquisitionRecordTriggerFeature.reset();
            return result;
        }
    }
    feature = m_EventAcquisitionRecordTriggerFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAcquisitionStart (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAcquisitionStartFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAcquisitionStartFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAcquisitionStartFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAcquisitionStart", m_EventAcquisitionStartFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventAcquisitionStartFeature.reset();
            return result;
        }
    }
    feature = m_EventAcquisitionStartFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAction0 (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAction0Feature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAction0Feature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAction0Feature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAction0", m_EventAction0Feature);
        if (result != VmbErrorSuccess)
        {
            m_EventAction0Feature.reset();
            return result;
        }
    }
    feature = m_EventAction0Feature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventAction1 (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventAction1Feature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventAction1Feature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventAction1Feature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventAction1", m_EventAction1Feature);
        if (result != VmbErrorSuccess)
        {
            m_EventAction1Feature.reset();
            return result;
        }
    }
    feature = m_EventAction1Feature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventError (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventErrorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventErrorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventErrorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventError", m_EventErrorFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventErrorFeature.reset();
            return result;
        }
    }
    feature = m_EventErrorFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventExposureEnd (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventExposureEndFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventExposureEndFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventExposureEndFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventExposureEnd", m_EventExposureEndFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventExposureEndFeature.reset();
            return result;
        }
    }
    feature = m_EventExposureEndFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventExposureStart (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventExposureStartFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventExposureStartFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventExposureStartFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventExposureStart", m_EventExposureStartFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventExposureStartFeature.reset();
            return result;
        }
    }
    feature = m_EventExposureStartFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventFrameTrigger (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventFrameTriggerFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventFrameTriggerFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventFrameTriggerFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventFrameTrigger", m_EventFrameTriggerFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventFrameTriggerFeature.reset();
            return result;
        }
    }
    feature = m_EventFrameTriggerFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventFrameTriggerReady (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventFrameTriggerReadyFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventFrameTriggerReadyFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventFrameTriggerReadyFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventFrameTriggerReady", m_EventFrameTriggerReadyFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventFrameTriggerReadyFeature.reset();
            return result;
        }
    }
    feature = m_EventFrameTriggerReadyFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventLine1FallingEdge (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventLine1FallingEdgeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventLine1FallingEdgeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventLine1FallingEdgeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventLine1FallingEdge", m_EventLine1FallingEdgeFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventLine1FallingEdgeFeature.reset();
            return result;
        }
    }
    feature = m_EventLine1FallingEdgeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventLine1RisingEdge (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventLine1RisingEdgeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventLine1RisingEdgeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventLine1RisingEdgeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventLine1RisingEdge", m_EventLine1RisingEdgeFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventLine1RisingEdgeFeature.reset();
            return result;
        }
    }
    feature = m_EventLine1RisingEdgeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventLine2FallingEdge (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventLine2FallingEdgeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventLine2FallingEdgeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventLine2FallingEdgeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventLine2FallingEdge", m_EventLine2FallingEdgeFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventLine2FallingEdgeFeature.reset();
            return result;
        }
    }
    feature = m_EventLine2FallingEdgeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventLine2RisingEdge (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventLine2RisingEdgeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventLine2RisingEdgeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventLine2RisingEdgeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventLine2RisingEdge", m_EventLine2RisingEdgeFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventLine2RisingEdgeFeature.reset();
            return result;
        }
    }
    feature = m_EventLine2RisingEdgeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventOverflow (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventOverflowFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventOverflowFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventOverflowFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventOverflow", m_EventOverflowFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventOverflowFeature.reset();
            return result;
        }
    }
    feature = m_EventOverflowFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventPtpSyncLocked (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventPtpSyncLockedFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventPtpSyncLockedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventPtpSyncLockedFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventPtpSyncLocked", m_EventPtpSyncLockedFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventPtpSyncLockedFeature.reset();
            return result;
        }
    }
    feature = m_EventPtpSyncLockedFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetEventPtpSyncLost (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetEventPtpSyncLostFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetEventPtpSyncLostFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_EventPtpSyncLostFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("EventPtpSyncLost", m_EventPtpSyncLostFeature);
        if (result != VmbErrorSuccess)
        {
            m_EventPtpSyncLostFeature.reset();
            return result;
        }
    }
    feature = m_EventPtpSyncLostFeature;
    return VmbErrorSuccess;
}


// Category /GigE
VmbErrorType MakoCameraTest::GetBandwidthControlMode (BandwidthControlModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBandwidthControlModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (BandwidthControlModeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetBandwidthControlMode (BandwidthControlModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBandwidthControlModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetBandwidthControlModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_BandwidthControlModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("BandwidthControlMode", m_BandwidthControlModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_BandwidthControlModeFeature.reset();
            return result;
        }
    }
    feature = m_BandwidthControlModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetChunkModeActive (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetChunkModeActiveFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetChunkModeActive (bool value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetChunkModeActiveFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetChunkModeActiveFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ChunkModeActiveFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ChunkModeActive", m_ChunkModeActiveFeature);
        if (result != VmbErrorSuccess)
        {
            m_ChunkModeActiveFeature.reset();
            return result;
        }
    }
    feature = m_ChunkModeActiveFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGevSCPSPacketSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevSCPSPacketSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGevSCPSPacketSize (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevSCPSPacketSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevSCPSPacketSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevSCPSPacketSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevSCPSPacketSize", m_GevSCPSPacketSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevSCPSPacketSizeFeature.reset();
            return result;
        }
    }
    feature = m_GevSCPSPacketSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetNonImagePayloadSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetNonImagePayloadSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetNonImagePayloadSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_NonImagePayloadSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("NonImagePayloadSize", m_NonImagePayloadSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_NonImagePayloadSizeFeature.reset();
            return result;
        }
    }
    feature = m_NonImagePayloadSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetPayloadSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPayloadSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetPayloadSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_PayloadSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("PayloadSize", m_PayloadSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_PayloadSizeFeature.reset();
            return result;
        }
    }
    feature = m_PayloadSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStreamBytesPerSecond (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamBytesPerSecondFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetStreamBytesPerSecond (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamBytesPerSecondFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStreamBytesPerSecondFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamBytesPerSecondFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamBytesPerSecond", m_StreamBytesPerSecondFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamBytesPerSecondFeature.reset();
            return result;
        }
    }
    feature = m_StreamBytesPerSecondFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStreamFrameRateConstrain (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamFrameRateConstrainFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetStreamFrameRateConstrain (bool value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamFrameRateConstrainFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStreamFrameRateConstrainFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamFrameRateConstrainFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamFrameRateConstrain", m_StreamFrameRateConstrainFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamFrameRateConstrainFeature.reset();
            return result;
        }
    }
    feature = m_StreamFrameRateConstrainFeature;
    return VmbErrorSuccess;
}


// Category /GigE/Configuration
VmbErrorType MakoCameraTest::GetGevIPConfigurationMode (GevIPConfigurationModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevIPConfigurationModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (GevIPConfigurationModeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::GetGevIPConfigurationModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevIPConfigurationModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevIPConfigurationMode", m_GevIPConfigurationModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevIPConfigurationModeFeature.reset();
            return result;
        }
    }
    feature = m_GevIPConfigurationModeFeature;
    return VmbErrorSuccess;
}


// Category /GigE/Current
VmbErrorType MakoCameraTest::GetGevCurrentDefaultGateway (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevCurrentDefaultGatewayFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevCurrentDefaultGatewayFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevCurrentDefaultGatewayFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevCurrentDefaultGateway", m_GevCurrentDefaultGatewayFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevCurrentDefaultGatewayFeature.reset();
            return result;
        }
    }
    feature = m_GevCurrentDefaultGatewayFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGevCurrentIPAddress (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevCurrentIPAddressFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevCurrentIPAddressFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevCurrentIPAddressFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevCurrentIPAddress", m_GevCurrentIPAddressFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevCurrentIPAddressFeature.reset();
            return result;
        }
    }
    feature = m_GevCurrentIPAddressFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGevCurrentSubnetMask (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevCurrentSubnetMaskFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevCurrentSubnetMaskFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevCurrentSubnetMaskFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevCurrentSubnetMask", m_GevCurrentSubnetMaskFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevCurrentSubnetMaskFeature.reset();
            return result;
        }
    }
    feature = m_GevCurrentSubnetMaskFeature;
    return VmbErrorSuccess;
}


// Category /GigE/GVCP
VmbErrorType MakoCameraTest::GetGVCPCmdRetries (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVCPCmdRetriesFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGVCPCmdRetries (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVCPCmdRetriesFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVCPCmdRetriesFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVCPCmdRetriesFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVCPCmdRetries", m_GVCPCmdRetriesFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVCPCmdRetriesFeature.reset();
            return result;
        }
    }
    feature = m_GVCPCmdRetriesFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGVCPCmdTimeout (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVCPCmdTimeoutFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGVCPCmdTimeout (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVCPCmdTimeoutFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVCPCmdTimeoutFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVCPCmdTimeoutFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVCPCmdTimeout", m_GVCPCmdTimeoutFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVCPCmdTimeoutFeature.reset();
            return result;
        }
    }
    feature = m_GVCPCmdTimeoutFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGevHeartbeatInterval (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevHeartbeatIntervalFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGevHeartbeatInterval (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevHeartbeatIntervalFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevHeartbeatIntervalFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevHeartbeatIntervalFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevHeartbeatInterval", m_GevHeartbeatIntervalFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevHeartbeatIntervalFeature.reset();
            return result;
        }
    }
    feature = m_GevHeartbeatIntervalFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGevHeartbeatTimeout (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevHeartbeatTimeoutFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGevHeartbeatTimeout (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevHeartbeatTimeoutFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevHeartbeatTimeoutFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevHeartbeatTimeoutFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevHeartbeatTimeout", m_GevHeartbeatTimeoutFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevHeartbeatTimeoutFeature.reset();
            return result;
        }
    }
    feature = m_GevHeartbeatTimeoutFeature;
    return VmbErrorSuccess;
}


// Category /GigE/PTP
VmbErrorType MakoCameraTest::GetPtpAcquisitionGateTime (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPtpAcquisitionGateTimeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetPtpAcquisitionGateTime (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPtpAcquisitionGateTimeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetPtpAcquisitionGateTimeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_PtpAcquisitionGateTimeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("PtpAcquisitionGateTime", m_PtpAcquisitionGateTimeFeature);
        if (result != VmbErrorSuccess)
        {
            m_PtpAcquisitionGateTimeFeature.reset();
            return result;
        }
    }
    feature = m_PtpAcquisitionGateTimeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetPtpMode (PtpModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPtpModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (PtpModeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetPtpMode (PtpModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPtpModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetPtpModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_PtpModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("PtpMode", m_PtpModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_PtpModeFeature.reset();
            return result;
        }
    }
    feature = m_PtpModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetPtpStatus (PtpStatusEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPtpStatusFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (PtpStatusEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::GetPtpStatusFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_PtpStatusFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("PtpStatus", m_PtpStatusFeature);
        if (result != VmbErrorSuccess)
        {
            m_PtpStatusFeature.reset();
            return result;
        }
    }
    feature = m_PtpStatusFeature;
    return VmbErrorSuccess;
}


// Category /GigE/Persistent
VmbErrorType MakoCameraTest::GetGevPersistentDefaultGateway (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevPersistentDefaultGatewayFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevPersistentDefaultGatewayFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevPersistentDefaultGatewayFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevPersistentDefaultGateway", m_GevPersistentDefaultGatewayFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevPersistentDefaultGatewayFeature.reset();
            return result;
        }
    }
    feature = m_GevPersistentDefaultGatewayFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGevPersistentIPAddress (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevPersistentIPAddressFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevPersistentIPAddressFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevPersistentIPAddressFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevPersistentIPAddress", m_GevPersistentIPAddressFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevPersistentIPAddressFeature.reset();
            return result;
        }
    }
    feature = m_GevPersistentIPAddressFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGevPersistentSubnetMask (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevPersistentSubnetMaskFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevPersistentSubnetMaskFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevPersistentSubnetMaskFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevPersistentSubnetMask", m_GevPersistentSubnetMaskFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevPersistentSubnetMaskFeature.reset();
            return result;
        }
    }
    feature = m_GevPersistentSubnetMaskFeature;
    return VmbErrorSuccess;
}


// Category /GigE/StreamHold
VmbErrorType MakoCameraTest::GetStreamHoldCapacity (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamHoldCapacityFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStreamHoldCapacityFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamHoldCapacityFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamHoldCapacity", m_StreamHoldCapacityFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamHoldCapacityFeature.reset();
            return result;
        }
    }
    feature = m_StreamHoldCapacityFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStreamHoldEnable (StreamHoldEnableEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamHoldEnableFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (StreamHoldEnableEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetStreamHoldEnable (StreamHoldEnableEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamHoldEnableFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStreamHoldEnableFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamHoldEnableFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamHoldEnable", m_StreamHoldEnableFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamHoldEnableFeature.reset();
            return result;
        }
    }
    feature = m_StreamHoldEnableFeature;
    return VmbErrorSuccess;
}


// Category /GigE/Timestamp
VmbErrorType MakoCameraTest::GevTimestampControlLatch ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevTimestampControlLatchFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType MakoCameraTest::GetGevTimestampControlLatchFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevTimestampControlLatchFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevTimestampControlLatch", m_GevTimestampControlLatchFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevTimestampControlLatchFeature.reset();
            return result;
        }
    }
    feature = m_GevTimestampControlLatchFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GevTimestampControlReset ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevTimestampControlResetFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType MakoCameraTest::GetGevTimestampControlResetFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevTimestampControlResetFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevTimestampControlReset", m_GevTimestampControlResetFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevTimestampControlResetFeature.reset();
            return result;
        }
    }
    feature = m_GevTimestampControlResetFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGevTimestampTickFrequency (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevTimestampTickFrequencyFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevTimestampTickFrequencyFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevTimestampTickFrequencyFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevTimestampTickFrequency", m_GevTimestampTickFrequencyFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevTimestampTickFrequencyFeature.reset();
            return result;
        }
    }
    feature = m_GevTimestampTickFrequencyFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGevTimestampValue (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevTimestampValueFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevTimestampValueFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevTimestampValueFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevTimestampValue", m_GevTimestampValueFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevTimestampValueFeature.reset();
            return result;
        }
    }
    feature = m_GevTimestampValueFeature;
    return VmbErrorSuccess;
}


// Category /IO/Strobe
VmbErrorType MakoCameraTest::GetStrobeDelay (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStrobeDelayFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetStrobeDelay (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStrobeDelayFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStrobeDelayFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StrobeDelayFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StrobeDelay", m_StrobeDelayFeature);
        if (result != VmbErrorSuccess)
        {
            m_StrobeDelayFeature.reset();
            return result;
        }
    }
    feature = m_StrobeDelayFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStrobeDuration (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStrobeDurationFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetStrobeDuration (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStrobeDurationFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStrobeDurationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StrobeDurationFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StrobeDuration", m_StrobeDurationFeature);
        if (result != VmbErrorSuccess)
        {
            m_StrobeDurationFeature.reset();
            return result;
        }
    }
    feature = m_StrobeDurationFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStrobeDurationMode (StrobeDurationModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStrobeDurationModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (StrobeDurationModeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetStrobeDurationMode (StrobeDurationModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStrobeDurationModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStrobeDurationModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StrobeDurationModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StrobeDurationMode", m_StrobeDurationModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_StrobeDurationModeFeature.reset();
            return result;
        }
    }
    feature = m_StrobeDurationModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStrobeSource (StrobeSourceEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStrobeSourceFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (StrobeSourceEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetStrobeSource (StrobeSourceEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStrobeSourceFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStrobeSourceFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StrobeSourceFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StrobeSource", m_StrobeSourceFeature);
        if (result != VmbErrorSuccess)
        {
            m_StrobeSourceFeature.reset();
            return result;
        }
    }
    feature = m_StrobeSourceFeature;
    return VmbErrorSuccess;
}


// Category /IO/SyncIn
VmbErrorType MakoCameraTest::GetSyncInGlitchFilter (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncInGlitchFilterFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetSyncInGlitchFilter (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncInGlitchFilterFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetSyncInGlitchFilterFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SyncInGlitchFilterFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SyncInGlitchFilter", m_SyncInGlitchFilterFeature);
        if (result != VmbErrorSuccess)
        {
            m_SyncInGlitchFilterFeature.reset();
            return result;
        }
    }
    feature = m_SyncInGlitchFilterFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetSyncInLevels (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncInLevelsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetSyncInLevelsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SyncInLevelsFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SyncInLevels", m_SyncInLevelsFeature);
        if (result != VmbErrorSuccess)
        {
            m_SyncInLevelsFeature.reset();
            return result;
        }
    }
    feature = m_SyncInLevelsFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetSyncInSelector (SyncInSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncInSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (SyncInSelectorEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetSyncInSelector (SyncInSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncInSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetSyncInSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SyncInSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SyncInSelector", m_SyncInSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_SyncInSelectorFeature.reset();
            return result;
        }
    }
    feature = m_SyncInSelectorFeature;
    return VmbErrorSuccess;
}


// Category /IO/SyncOut
VmbErrorType MakoCameraTest::GetSyncOutLevels (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncOutLevelsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetSyncOutLevels (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncOutLevelsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetSyncOutLevelsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SyncOutLevelsFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SyncOutLevels", m_SyncOutLevelsFeature);
        if (result != VmbErrorSuccess)
        {
            m_SyncOutLevelsFeature.reset();
            return result;
        }
    }
    feature = m_SyncOutLevelsFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetSyncOutPolarity (SyncOutPolarityEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncOutPolarityFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (SyncOutPolarityEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetSyncOutPolarity (SyncOutPolarityEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncOutPolarityFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetSyncOutPolarityFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SyncOutPolarityFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SyncOutPolarity", m_SyncOutPolarityFeature);
        if (result != VmbErrorSuccess)
        {
            m_SyncOutPolarityFeature.reset();
            return result;
        }
    }
    feature = m_SyncOutPolarityFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetSyncOutSelector (SyncOutSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncOutSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (SyncOutSelectorEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetSyncOutSelector (SyncOutSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncOutSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetSyncOutSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SyncOutSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SyncOutSelector", m_SyncOutSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_SyncOutSelectorFeature.reset();
            return result;
        }
    }
    feature = m_SyncOutSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetSyncOutSource (SyncOutSourceEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncOutSourceFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (SyncOutSourceEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetSyncOutSource (SyncOutSourceEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSyncOutSourceFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetSyncOutSourceFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SyncOutSourceFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SyncOutSource", m_SyncOutSourceFeature);
        if (result != VmbErrorSuccess)
        {
            m_SyncOutSourceFeature.reset();
            return result;
        }
    }
    feature = m_SyncOutSourceFeature;
    return VmbErrorSuccess;
}


// Category /ImageFormat
VmbErrorType MakoCameraTest::GetHeight (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetHeightFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetHeight (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetHeightFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetHeightFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_HeightFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("Height", m_HeightFeature);
        if (result != VmbErrorSuccess)
        {
            m_HeightFeature.reset();
            return result;
        }
    }
    feature = m_HeightFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetHeightMax (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetHeightMaxFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetHeightMaxFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_HeightMaxFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("HeightMax", m_HeightMaxFeature);
        if (result != VmbErrorSuccess)
        {
            m_HeightMaxFeature.reset();
            return result;
        }
    }
    feature = m_HeightMaxFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetImageSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetImageSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetImageSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ImageSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ImageSize", m_ImageSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_ImageSizeFeature.reset();
            return result;
        }
    }
    feature = m_ImageSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetOffsetX (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOffsetXFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetOffsetX (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOffsetXFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetOffsetXFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_OffsetXFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("OffsetX", m_OffsetXFeature);
        if (result != VmbErrorSuccess)
        {
            m_OffsetXFeature.reset();
            return result;
        }
    }
    feature = m_OffsetXFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetOffsetY (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOffsetYFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetOffsetY (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOffsetYFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetOffsetYFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_OffsetYFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("OffsetY", m_OffsetYFeature);
        if (result != VmbErrorSuccess)
        {
            m_OffsetYFeature.reset();
            return result;
        }
    }
    feature = m_OffsetYFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetPixelFormat (PixelFormatEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPixelFormatFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (PixelFormatEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetPixelFormat (PixelFormatEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPixelFormatFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetPixelFormatFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_PixelFormatFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("PixelFormat", m_PixelFormatFeature);
        if (result != VmbErrorSuccess)
        {
            m_PixelFormatFeature.reset();
            return result;
        }
    }
    feature = m_PixelFormatFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetWidth (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetWidthFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetWidth (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetWidthFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetWidthFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_WidthFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("Width", m_WidthFeature);
        if (result != VmbErrorSuccess)
        {
            m_WidthFeature.reset();
            return result;
        }
    }
    feature = m_WidthFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetWidthMax (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetWidthMaxFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetWidthMaxFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_WidthMaxFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("WidthMax", m_WidthMaxFeature);
        if (result != VmbErrorSuccess)
        {
            m_WidthMaxFeature.reset();
            return result;
        }
    }
    feature = m_WidthMaxFeature;
    return VmbErrorSuccess;
}


// Category /ImageMode
VmbErrorType MakoCameraTest::GetBinningHorizontal (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBinningHorizontalFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetBinningHorizontal (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBinningHorizontalFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetBinningHorizontalFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_BinningHorizontalFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("BinningHorizontal", m_BinningHorizontalFeature);
        if (result != VmbErrorSuccess)
        {
            m_BinningHorizontalFeature.reset();
            return result;
        }
    }
    feature = m_BinningHorizontalFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetBinningVertical (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBinningVerticalFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetBinningVertical (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBinningVerticalFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetBinningVerticalFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_BinningVerticalFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("BinningVertical", m_BinningVerticalFeature);
        if (result != VmbErrorSuccess)
        {
            m_BinningVerticalFeature.reset();
            return result;
        }
    }
    feature = m_BinningVerticalFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDecimationHorizontal (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDecimationHorizontalFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetDecimationHorizontal (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDecimationHorizontalFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDecimationHorizontalFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DecimationHorizontalFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DecimationHorizontal", m_DecimationHorizontalFeature);
        if (result != VmbErrorSuccess)
        {
            m_DecimationHorizontalFeature.reset();
            return result;
        }
    }
    feature = m_DecimationHorizontalFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDecimationVertical (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDecimationVerticalFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetDecimationVertical (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDecimationVerticalFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDecimationVerticalFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DecimationVerticalFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DecimationVertical", m_DecimationVerticalFeature);
        if (result != VmbErrorSuccess)
        {
            m_DecimationVerticalFeature.reset();
            return result;
        }
    }
    feature = m_DecimationVerticalFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetReverseX (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetReverseXFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetReverseX (bool value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetReverseXFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetReverseXFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ReverseXFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ReverseX", m_ReverseXFeature);
        if (result != VmbErrorSuccess)
        {
            m_ReverseXFeature.reset();
            return result;
        }
    }
    feature = m_ReverseXFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetReverseY (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetReverseYFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetReverseY (bool value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetReverseYFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetReverseYFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ReverseYFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ReverseY", m_ReverseYFeature);
        if (result != VmbErrorSuccess)
        {
            m_ReverseYFeature.reset();
            return result;
        }
    }
    feature = m_ReverseYFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetSensorHeight (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSensorHeightFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetSensorHeightFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SensorHeightFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SensorHeight", m_SensorHeightFeature);
        if (result != VmbErrorSuccess)
        {
            m_SensorHeightFeature.reset();
            return result;
        }
    }
    feature = m_SensorHeightFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetSensorWidth (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSensorWidthFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetSensorWidthFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SensorWidthFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SensorWidth", m_SensorWidthFeature);
        if (result != VmbErrorSuccess)
        {
            m_SensorWidthFeature.reset();
            return result;
        }
    }
    feature = m_SensorWidthFeature;
    return VmbErrorSuccess;
}


// Category /Info
VmbErrorType MakoCameraTest::GetDeviceFirmwareVersion (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceFirmwareVersionFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDeviceFirmwareVersionFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceFirmwareVersionFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceFirmwareVersion", m_DeviceFirmwareVersionFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceFirmwareVersionFeature.reset();
            return result;
        }
    }
    feature = m_DeviceFirmwareVersionFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDeviceID (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDeviceIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceID", m_DeviceIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceIDFeature.reset();
            return result;
        }
    }
    feature = m_DeviceIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDeviceModelName (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceModelNameFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDeviceModelNameFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceModelNameFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceModelName", m_DeviceModelNameFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceModelNameFeature.reset();
            return result;
        }
    }
    feature = m_DeviceModelNameFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDevicePartNumber (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDevicePartNumberFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDevicePartNumberFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DevicePartNumberFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DevicePartNumber", m_DevicePartNumberFeature);
        if (result != VmbErrorSuccess)
        {
            m_DevicePartNumberFeature.reset();
            return result;
        }
    }
    feature = m_DevicePartNumberFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDeviceScanType (DeviceScanTypeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceScanTypeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (DeviceScanTypeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::GetDeviceScanTypeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceScanTypeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceScanType", m_DeviceScanTypeFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceScanTypeFeature.reset();
            return result;
        }
    }
    feature = m_DeviceScanTypeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDeviceUserID (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceUserIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetDeviceUserID (const char * value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceUserIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDeviceUserIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceUserIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceUserID", m_DeviceUserIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceUserIDFeature.reset();
            return result;
        }
    }
    feature = m_DeviceUserIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetDeviceVendorName (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceVendorNameFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetDeviceVendorNameFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceVendorNameFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceVendorName", m_DeviceVendorNameFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceVendorNameFeature.reset();
            return result;
        }
    }
    feature = m_DeviceVendorNameFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetFirmwareVerBuild (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFirmwareVerBuildFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetFirmwareVerBuildFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FirmwareVerBuildFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FirmwareVerBuild", m_FirmwareVerBuildFeature);
        if (result != VmbErrorSuccess)
        {
            m_FirmwareVerBuildFeature.reset();
            return result;
        }
    }
    feature = m_FirmwareVerBuildFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetFirmwareVerMajor (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFirmwareVerMajorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetFirmwareVerMajorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FirmwareVerMajorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FirmwareVerMajor", m_FirmwareVerMajorFeature);
        if (result != VmbErrorSuccess)
        {
            m_FirmwareVerMajorFeature.reset();
            return result;
        }
    }
    feature = m_FirmwareVerMajorFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetFirmwareVerMinor (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFirmwareVerMinorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetFirmwareVerMinorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FirmwareVerMinorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FirmwareVerMinor", m_FirmwareVerMinorFeature);
        if (result != VmbErrorSuccess)
        {
            m_FirmwareVerMinorFeature.reset();
            return result;
        }
    }
    feature = m_FirmwareVerMinorFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGevDeviceMACAddress (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGevDeviceMACAddressFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGevDeviceMACAddressFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GevDeviceMACAddressFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GevDeviceMACAddress", m_GevDeviceMACAddressFeature);
        if (result != VmbErrorSuccess)
        {
            m_GevDeviceMACAddressFeature.reset();
            return result;
        }
    }
    feature = m_GevDeviceMACAddressFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetSensorBits (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSensorBitsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetSensorBitsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SensorBitsFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SensorBits", m_SensorBitsFeature);
        if (result != VmbErrorSuccess)
        {
            m_SensorBitsFeature.reset();
            return result;
        }
    }
    feature = m_SensorBitsFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetSensorType (SensorTypeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSensorTypeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (SensorTypeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::GetSensorTypeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SensorTypeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SensorType", m_SensorTypeFeature);
        if (result != VmbErrorSuccess)
        {
            m_SensorTypeFeature.reset();
            return result;
        }
    }
    feature = m_SensorTypeFeature;
    return VmbErrorSuccess;
}


// Category /SavedUserSets
VmbErrorType MakoCameraTest::GetUserSetDefaultSelector (UserSetDefaultSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetDefaultSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (UserSetDefaultSelectorEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetUserSetDefaultSelector (UserSetDefaultSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetDefaultSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetUserSetDefaultSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_UserSetDefaultSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("UserSetDefaultSelector", m_UserSetDefaultSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_UserSetDefaultSelectorFeature.reset();
            return result;
        }
    }
    feature = m_UserSetDefaultSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::UserSetLoad ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetLoadFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType MakoCameraTest::GetUserSetLoadFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_UserSetLoadFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("UserSetLoad", m_UserSetLoadFeature);
        if (result != VmbErrorSuccess)
        {
            m_UserSetLoadFeature.reset();
            return result;
        }
    }
    feature = m_UserSetLoadFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::UserSetSave ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetSaveFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType MakoCameraTest::GetUserSetSaveFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_UserSetSaveFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("UserSetSave", m_UserSetSaveFeature);
        if (result != VmbErrorSuccess)
        {
            m_UserSetSaveFeature.reset();
            return result;
        }
    }
    feature = m_UserSetSaveFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetUserSetSelector (UserSetSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (UserSetSelectorEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetUserSetSelector (UserSetSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetUserSetSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_UserSetSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("UserSetSelector", m_UserSetSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_UserSetSelectorFeature.reset();
            return result;
        }
    }
    feature = m_UserSetSelectorFeature;
    return VmbErrorSuccess;
}


// Category /Stream/Info
VmbErrorType MakoCameraTest::GetGVSPFilterVersion (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPFilterVersionFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPFilterVersionFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPFilterVersionFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPFilterVersion", m_GVSPFilterVersionFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPFilterVersionFeature.reset();
            return result;
        }
    }
    feature = m_GVSPFilterVersionFeature;
    return VmbErrorSuccess;
}


// Category /Stream/Multicast
VmbErrorType MakoCameraTest::GetMulticastEnable (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetMulticastEnableFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetMulticastEnable (bool value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetMulticastEnableFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetMulticastEnableFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_MulticastEnableFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("MulticastEnable", m_MulticastEnableFeature);
        if (result != VmbErrorSuccess)
        {
            m_MulticastEnableFeature.reset();
            return result;
        }
    }
    feature = m_MulticastEnableFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetMulticastIPAddress (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetMulticastIPAddressFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetMulticastIPAddress (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetMulticastIPAddressFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetMulticastIPAddressFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_MulticastIPAddressFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("MulticastIPAddress", m_MulticastIPAddressFeature);
        if (result != VmbErrorSuccess)
        {
            m_MulticastIPAddressFeature.reset();
            return result;
        }
    }
    feature = m_MulticastIPAddressFeature;
    return VmbErrorSuccess;
}


// Category /Stream/Settings
VmbErrorType MakoCameraTest::GVSPAdjustPacketSize ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPAdjustPacketSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPAdjustPacketSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPAdjustPacketSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPAdjustPacketSize", m_GVSPAdjustPacketSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPAdjustPacketSizeFeature.reset();
            return result;
        }
    }
    feature = m_GVSPAdjustPacketSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGVSPBurstSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPBurstSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGVSPBurstSize (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPBurstSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPBurstSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPBurstSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPBurstSize", m_GVSPBurstSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPBurstSizeFeature.reset();
            return result;
        }
    }
    feature = m_GVSPBurstSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGVSPDriver (GVSPDriverEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPDriverFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (GVSPDriverEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::SetGVSPDriver (GVSPDriverEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPDriverFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPDriverFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPDriverFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPDriver", m_GVSPDriverFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPDriverFeature.reset();
            return result;
        }
    }
    feature = m_GVSPDriverFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGVSPHostReceiveBuffers (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPHostReceiveBuffersFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGVSPHostReceiveBuffers (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPHostReceiveBuffersFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPHostReceiveBuffersFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPHostReceiveBuffersFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPHostReceiveBuffers", m_GVSPHostReceiveBuffersFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPHostReceiveBuffersFeature.reset();
            return result;
        }
    }
    feature = m_GVSPHostReceiveBuffersFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGVSPMaxLookBack (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPMaxLookBackFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGVSPMaxLookBack (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPMaxLookBackFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPMaxLookBackFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPMaxLookBackFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPMaxLookBack", m_GVSPMaxLookBackFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPMaxLookBackFeature.reset();
            return result;
        }
    }
    feature = m_GVSPMaxLookBackFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGVSPMaxRequests (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPMaxRequestsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGVSPMaxRequests (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPMaxRequestsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPMaxRequestsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPMaxRequestsFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPMaxRequests", m_GVSPMaxRequestsFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPMaxRequestsFeature.reset();
            return result;
        }
    }
    feature = m_GVSPMaxRequestsFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGVSPMaxWaitSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPMaxWaitSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGVSPMaxWaitSize (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPMaxWaitSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPMaxWaitSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPMaxWaitSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPMaxWaitSize", m_GVSPMaxWaitSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPMaxWaitSizeFeature.reset();
            return result;
        }
    }
    feature = m_GVSPMaxWaitSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGVSPMissingSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPMissingSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGVSPMissingSize (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPMissingSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPMissingSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPMissingSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPMissingSize", m_GVSPMissingSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPMissingSizeFeature.reset();
            return result;
        }
    }
    feature = m_GVSPMissingSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGVSPPacketSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPPacketSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGVSPPacketSize (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPPacketSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPPacketSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPPacketSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPPacketSize", m_GVSPPacketSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPPacketSizeFeature.reset();
            return result;
        }
    }
    feature = m_GVSPPacketSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGVSPTiltingSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPTiltingSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGVSPTiltingSize (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPTiltingSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPTiltingSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPTiltingSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPTiltingSize", m_GVSPTiltingSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPTiltingSizeFeature.reset();
            return result;
        }
    }
    feature = m_GVSPTiltingSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetGVSPTimeout (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPTimeoutFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::SetGVSPTimeout (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGVSPTimeoutFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetGVSPTimeoutFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GVSPTimeoutFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GVSPTimeout", m_GVSPTimeoutFeature);
        if (result != VmbErrorSuccess)
        {
            m_GVSPTimeoutFeature.reset();
            return result;
        }
    }
    feature = m_GVSPTimeoutFeature;
    return VmbErrorSuccess;
}


// Category /Stream/Statistics
VmbErrorType MakoCameraTest::GetStatFrameDelivered (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatFrameDeliveredFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatFrameDeliveredFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatFrameDeliveredFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatFrameDelivered", m_StatFrameDeliveredFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatFrameDeliveredFeature.reset();
            return result;
        }
    }
    feature = m_StatFrameDeliveredFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatFrameDropped (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatFrameDroppedFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatFrameDroppedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatFrameDroppedFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatFrameDropped", m_StatFrameDroppedFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatFrameDroppedFeature.reset();
            return result;
        }
    }
    feature = m_StatFrameDroppedFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatFrameRate (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatFrameRateFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatFrameRateFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatFrameRateFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatFrameRate", m_StatFrameRateFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatFrameRateFeature.reset();
            return result;
        }
    }
    feature = m_StatFrameRateFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatFrameRescued (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatFrameRescuedFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatFrameRescuedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatFrameRescuedFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatFrameRescued", m_StatFrameRescuedFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatFrameRescuedFeature.reset();
            return result;
        }
    }
    feature = m_StatFrameRescuedFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatFrameShoved (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatFrameShovedFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatFrameShovedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatFrameShovedFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatFrameShoved", m_StatFrameShovedFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatFrameShovedFeature.reset();
            return result;
        }
    }
    feature = m_StatFrameShovedFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatFrameUnderrun (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatFrameUnderrunFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatFrameUnderrunFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatFrameUnderrunFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatFrameUnderrun", m_StatFrameUnderrunFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatFrameUnderrunFeature.reset();
            return result;
        }
    }
    feature = m_StatFrameUnderrunFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatLocalRate (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatLocalRateFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatLocalRateFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatLocalRateFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatLocalRate", m_StatLocalRateFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatLocalRateFeature.reset();
            return result;
        }
    }
    feature = m_StatLocalRateFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatPacketErrors (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatPacketErrorsFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatPacketErrorsFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatPacketErrorsFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatPacketErrors", m_StatPacketErrorsFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatPacketErrorsFeature.reset();
            return result;
        }
    }
    feature = m_StatPacketErrorsFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatPacketMissed (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatPacketMissedFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatPacketMissedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatPacketMissedFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatPacketMissed", m_StatPacketMissedFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatPacketMissedFeature.reset();
            return result;
        }
    }
    feature = m_StatPacketMissedFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatPacketReceived (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatPacketReceivedFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatPacketReceivedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatPacketReceivedFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatPacketReceived", m_StatPacketReceivedFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatPacketReceivedFeature.reset();
            return result;
        }
    }
    feature = m_StatPacketReceivedFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatPacketRequested (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatPacketRequestedFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatPacketRequestedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatPacketRequestedFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatPacketRequested", m_StatPacketRequestedFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatPacketRequestedFeature.reset();
            return result;
        }
    }
    feature = m_StatPacketRequestedFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatPacketResent (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatPacketResentFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatPacketResentFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatPacketResentFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatPacketResent", m_StatPacketResentFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatPacketResentFeature.reset();
            return result;
        }
    }
    feature = m_StatPacketResentFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStatTimeElapsed (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStatTimeElapsedFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStatTimeElapsedFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StatTimeElapsedFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StatTimeElapsed", m_StatTimeElapsedFeature);
        if (result != VmbErrorSuccess)
        {
            m_StatTimeElapsedFeature.reset();
            return result;
        }
    }
    feature = m_StatTimeElapsedFeature;
    return VmbErrorSuccess;
}


// Category /StreamInformation
VmbErrorType MakoCameraTest::GetStreamID (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType MakoCameraTest::GetStreamIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamID", m_StreamIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamIDFeature.reset();
            return result;
        }
    }
    feature = m_StreamIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType MakoCameraTest::GetStreamType (StreamTypeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamTypeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (StreamTypeEnum) nValue;
    return result;
}
VmbErrorType MakoCameraTest::GetStreamTypeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamTypeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamType", m_StreamTypeFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamTypeFeature.reset();
            return result;
        }
    }
    feature = m_StreamTypeFeature;
    return VmbErrorSuccess;
}

